package com.bridgelabz.datastructure;


public class MyLinkedList<T> {
	private Node<T> lastNode;
    private  Node<T> first;

    private int nodeCount;

    public MyLinkedList(){
        this.lastNode = null;
        this.nodeCount = 0;
    }

    public int size() {
        return nodeCount;
    }

    public boolean isEmpty() {
        return this.nodeCount == 0;
    }
   /* public void add(T data) {
        Node<T> currentNode = new Node<T>(data);

        if (this.lastNode != null) {
            currentNode.index = lastNode.index + 1;
            currentNode.previousNode = lastNode;
            lastNode.nextNode = currentNode;
        }else {
            currentNode.previousNode = null;
            currentNode.index = 0;
        }
        this.lastNode = currentNode;
        this.nodeCount++;
    }*/
    
    Node<T> head;
   
    //Insert element at the end
    
    public void add(T data) {
    	
    	Node<T> node = new Node<T>();
    	node.data = data;
    	node.next  =null;
    	if(head == null) {
    		head = node;
    	}else {
    		Node<T> n = head;
    		while(n.next != null) {
    			n = n.next;
    		}
    		n.next = node; //Refer next node.
    	}
		//return data;
    }
    
    //show element 
    
    public void show() {
    	Node<T> node = head;
    	while(node.next != null) {
    		System.out.println(node.data);
    		node = node.next; //shift the next node
    	}
    	System.out.println(node.data);
    }
    
    //add element at the start
    
    public void insertAtStart(T data) {
    	Node<T> node = new Node<T>();
    	node.data = data;
    	node.next  =null;  
    	node.next = head;
    	head = node;
    }
    
    //insert at any location
    
    public void insertAt(int index , T data) {
    	Node<T>  node = new Node<T>();
    	node.data = data;
    	node.next = null;
    	Node<T> travel = head;  
    	if(index == 0) {
    		insertAtStart(data);
    	}else {
    	for(int i = 0 ; i < index-1 ; i++) {
    		travel = travel.next;
    	}
    	node.next = travel.next;
    	travel.next = node;
    	}
		//0return data;
    }
    
    //delete element of any location
    
   
    
    public void deleteAt(int index)
	{
		if(index==0)
		{
			head = head.next;
		}
		else
		{
			Node<T> n = head;
			Node<T> n1 = null;
			for(int i=0;i<index-1;i++)
			{
				n = n.next;
			}
			n1 = n.next;
			n.next = n1.next;
			//System.out.println("n1 " + n1.data);
			n1 = null;
		}
}
    //Remove and return the last item in the list
    
    public T pop() {
    	Node<T> travel = head;
    	Node<T> t1 ;
    	while(travel.next != null)
    		{
    		t1 = travel.next;
    		if(t1.next == null)
    		{
    			travel.next = null;
    			
    			//System.out.println("t1 = "+t1.data);
    			return  t1.data;
    		}
    		travel = travel.next;
    		}
    		return null;
            }
    
    //search for the item in the list.
    
    public boolean search(T data)
    {
		Node<T> temp=first;
        for(int i=0; i<size(); i++)
        {
            if(temp.data == data)
            {
                return true;
            }
        }
        return false;
    }
    
    public int indexOf(Object o) {
        int index = 0;
        if (o == null) {
            for (Node<T> x = first; x != null; x = x.next) {
                if (x.data == null)
                    return index;
                index++;
            }
        } else {
            for (Node<T> x = first; x != null; x = x.next) {
                if (o.equals(x.data))
                    return index;
                index++;
            }
        }
        return -1;
    }
}

    
    
    	
    
    
    


