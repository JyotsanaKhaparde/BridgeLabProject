package com.bridgelabz.datastructure;

import java.util.Arrays;

public class StackMethods<T> implements IStack<T> {
	private static final int DEFAULT_CAPACITY = 10;
	private T[] store;
	private int size = 0;
	private int capacity;
	
	//****************************************************
	
	public StackMethods() {
		capacity = DEFAULT_CAPACITY;
		store = (T[]) new Object[DEFAULT_CAPACITY];
	}
	
	//*****************************************************
	
	public StackMethods(int capacity) {
		this.capacity = capacity;
		store = (T[]) new Object[capacity];

	}
	
	//**************************************************

	public boolean push(T value) {
		if(size >= store.length) {
			int newSize = size + (size >>1);
			store = Arrays.copyOf(store, newSize);
		}
		store[size++] = value;
		return true;
	}
	
	//***************************************************

	/*public T pop() {
		if(size <= 0 ) 
			return null;
		
		T value =store[--size];
		store[size] = null;
		
		int reduceSize = size;
		if(size >= capacity && size < (reduceSize +reduceSize << 1)) {
			System.arraycopy(store, 0, store, 0, size);
		}
		
		return value;
	}*/
	
	public T pop(){
		T data = null;
		if(isEmpty()) {
			System.out.println("Stack is empty");
		}else {
		size--;
		data = store[size];
		}
		//store[size] = 0;
		return data;
		
}
	
	//*********************************************************

	public boolean contain(T value) {
		boolean found = false;
		for(int i =0 ; i < size ; i++) {
			T element  = store[i];
			
			if(element.equals(value)) {
				return true;
			}
		}
		return false;
	}
	
	public boolean containchar(char value) {
		boolean found = false;
		for(int i =0 ; i < size ; i++) {
			T element  = store[i];
			
			if(element.equals(value)) {
				return true;
			}
		}
		return false;
	}
	
	//*************************************************************

	public int size() {
		return size;
	}
	
	//***********************************************************

	public void clear() {
		for(int i = 0 ; i < size ; i++) {
			store[i] = null;
		}
	}
	
	//**********************************************************

	public boolean isEmpty() {
		return size==0;
	}
	
	//***********************************************************
	
	public String toString() {
		StringBuilder buildre = new StringBuilder();
		buildre.append("[");
		
		for(int i = size-1 ;i >= 0 ; i--) {
			buildre.append(store[i]);
			
			if(i > 0 ) {
				buildre.append(",");
			}
			
		}
		buildre.append("]");
		
		return buildre.toString();
	}
	
	//*************************************************************
	
	public T peek() {
		T data;
		data = store[size-1];
		return data;
	}

	

	

}
