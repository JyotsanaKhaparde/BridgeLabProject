package com.bridgelabz.datastructure;


public class MyLinkedList<T> {
	private Node<T> lastNode;
    private  Node<T> first;
    Node<T> pre = null;
    private int count = 0; 
    Node<T> head;


   //**************************************************** 

    public MyLinkedList(){
        this.lastNode = null;
        this.count = 0;
    }
    
    //*****************************************************

  
    public boolean isEmpty() {
        return this.count == 0;
    }
    
    //****************************************************
   
    
   
    //Insert element at the end
    
    public void add(T data) {
    	Node<T> next = head;
		Node<T> node = new Node<T>( data,next);
    	node.data = data;
    	node.next  =null;
    	if(head == null) {
    		head = node;
    		count++;
    	}else {
    		Node<T> n = head;
    		while(n.next != null) {
    			n = n.next;
    			count++;
    		}
    		n.next = node; //Refer next node.
    	}
    }
    
    //****************************************************
    
    //show element 
    
    public void show() {
    	Node<T> node = head;
    	while(node.next != null) {
    		System.out.println(node.data);
    		node = node.next; //shift the next node
    	}
    	System.out.println(node.data);
    }
    public int size() {
        return count;
    }
    
    //********************************************************

    //add element at the start
    
    public void insertAtStart(T data) {
    	Node<T> next = head;

    	Node<T> node = new Node<T>(data,next);
    	node.data = data;
    	node.next  =null;  
    	node.next = head;
    	head = node;
    	count++;
    }
    
    //***************************************************************
    
    
    //insert at any location
    
    public void insertAt(int index , T data) {
    	Node<T> next = head;

    	Node<T>  node = new Node<T>(data,next);
    	node.data = data;
    	node.next = null;
    	Node<T> travel = head;  
    	if(index == 0) {
    		insertAtStart(data);
    		count++;
    	}else {
    	for(int i = 0 ; i < index-1 ; i++) {
    		travel = travel.next;
    	}
    	node.next = travel.next;
    	travel.next = node;
    	count++;
    	}
    }
    
    
    //**********************************************************
    
    //delete element of any location
    
  
    public void deleteAt(int index)
	{
		if(index==0)
		{
			head = head.next;
			count--;
		}
		else
		{
			Node<T> n = head;
			Node<T> n1 = null;
			for(int i=0;i<index-1;i++)
			{
				n = n.next;
			}
			n1 = n.next;
			n.next = n1.next;
			count--;
			//System.out.println("n1 " + n1.data);
			n1 = null;
		}
}
    
    //*********************************************************
    
    
    //Remove and return the last item in the list
    
    public T pop() {
    	Node<T> travel = head;
    	Node<T> t1 ;
    	while(travel.next != null)
    		{
    		t1 = travel.next;
    		if(t1.next == null)
    		{
    			travel.next = null;
    			count--;
    			//System.out.println("t1 = "+t1.data);
    			return  t1.data;
    		}
    		travel = travel.next;
    		}
    		return null;
            }
    
    //**********************************************************
    
    //search for the item in the list.
    
    public boolean search(T data)
    {
		Node<T> temp=head;
        for(int i=0; i<size(); i++)
        {

            if(temp.data.equals(data))
            {
                return true;
            }else {
                temp = temp.next;
                if(! temp.data.equals(data)) {
                	return false;
                }
            }
        }
        return false;
        
     }
    
    //*****************************************************
    
  /*  public int indexOf(Object o) {
        int index = 0;
        if (o == null) {
            for (Node<T> x = first; x != null; x = x.next) {
                if (x.data == null)
                    return index;
                index++;
            }
        } else {
            for (Node<T> x = first; x != null; x = x.next) {
                if (o.equals(x.data))
                    return index;
                index++;
            }
        }
        return -1;
    }*/
    
    //*****************************************************************
    
    public int index(T data) {
    	Node<T> temp = head;
    	for(int i = 0 ; i < size() ; i++) {
    		if(temp.data.equals(data)) {
    			return i ;
    		}
    		temp = temp.next;
    	}
		return -1;
    	
    }
    
    //*****************************************************************
    
    //Returns {@code true} if this list contains the specified element.
    
  /*  public boolean contains(Object o) {
        return indexOf(o) != -1;
    }*/
    
    //remove the item from the list
    
  /*  public void remove(T data)
    {
        Node<T> temp=head;
        Node<T> pre=null;
        if(head.data == null)
        {
            head=head.next;
            count--;
            return;
        }
        while(temp != null)
        {
            if(temp.data == data)
            {
                pre.next=temp.next;
                temp.next.pre=temp.pre.next;
                count--;
                return;
            }
            pre=temp;
            temp=temp.next;
            if(temp.next == null)
            {
                pre.next=null;
                count--;
            }
        }
    }*/
    
    //*******************************************************
    
    
    public T pop(int index)
    {
        if(index==0)
        {
        	head = head.next;
           // T firstData=head.data;
            count--;
            //return firstData;
        }else {
        Node<T> temp=head;
        for(int i=0; i<index-1; i++)
        {
            temp=temp.next;
        }
        T dataOfIndex=temp.next.data;
        temp.next=temp.next.next;
        count--;
        return dataOfIndex;

        }
		return null;
    }
}

    
    
    	
    
    
    


