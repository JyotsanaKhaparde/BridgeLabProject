package com.bridgelabz.datastructure;

public class MyOrderedList<T extends Comparable<? super T>> {
	private Node<T> lastNode;
    private  Node<T> first;
    Node<T> pre = null;
    private int count = 0; 
    Node<T> head;
    Node<T> traverse;
    Node<T> temp;
    Node<T> temp1;
    
    //**************************************************** 

    public MyOrderedList(){
        this.lastNode = null;
        this.count = 0;
    }
    
    //*****************************************************

  
    public boolean isEmpty() {
        return this.count == 0;
    }
    
    //****************************************************
   
    public void add(T data){
   
		Node<T> node = new Node<T>( data,null);

        if (head == null)
            head = node;

        else {
            traverse = head;
            if (head.data.compareTo(node.data)>0){
                head = node;
                node.next = traverse;
                }

            if (head.data.compareTo(node.data)<0){
                temp = head;
                while (traverse.next != null){
                    if( traverse.data.compareTo(node.data)<0) {
                        temp = traverse;
                    traverse = traverse.next;
                    }

                if (traverse.data.compareTo(node.data)<0)
                    temp = traverse;

                temp1 = temp.next;
                temp.next = node;
                node.next = temp1;
            }
            }
        }
    }
    
 //****************************************************
    
    //show element 
    
    public void show() {
    	Node<T> node = head;
    	while(node.next != null) {
    		System.out.println(node.data);
    		node = node.next; //shift the next node
    	}
    	System.out.println(node.data);
    }
    
    //*******************************************************
    
    public int size() {
        return count;
    }
    
    //********************************************************

    //add element at the start
    
    public void insertAtStart(T data) {
    	Node<T> next = head;

    	Node<T> node = new Node<T>(data,next);
    	node.data = data;
    	node.next  =null;  
    	node.next = head;
    	head = node;
    	count++;
    }
    
    //***************************************************************
    
 //insert at any location
    
    public void insertAt(int index , T data) {
    	Node<T> next = head;

    	Node<T>  node = new Node<T>(data,next);
    	node.data = data;
    	node.next = null;
    	Node<T> travel = head;  
    	if(index == 0) {
    		insertAtStart(data);
    		count++;
    	}else {
    	for(int i = 0 ; i < index-1 ; i++) {
    		travel = travel.next;
    	}
    	node.next = travel.next;
    	travel.next = node;
    	count++;
    	}
    }
    
    
    //**********************************************************
    
    //delete element of any location
    
  
    public void deleteAt(int index)
	{
		if(index==0)
		{
			head = head.next;
			count--;
		}
		else
		{
			Node<T> n = head;
			Node<T> n1 = null;
			for(int i=0;i<index-1;i++)
			{
				n = n.next;
			}
			n1 = n.next;
			n.next = n1.next;
			count--;
			//System.out.println("n1 " + n1.data);
			n1 = null;
		}
}
    
    //*********************************************************
    
    
    //Remove and return the last item in the list
    
    public T pop() {
    	Node<T> travel = head;
    	Node<T> t1 ;
    	while(travel.next != null)
    		{
    		t1 = travel.next;
    		if(t1.next == null)
    		{
    			travel.next = null;
    			count--;
    			//System.out.println("t1 = "+t1.data);
    			return  t1.data;
    		}
    		travel = travel.next;
    		}
    		return null;
            }
    
    //**********************************************************
    
    //search for the item in the list.
    
    public boolean search(T data)
    {
		Node<T> temp=head;
        for(int i=0; i<size(); i++)
        {

            if(temp.data.equals(data))
            {
                return true;
            }else {
                temp = temp.next;
                if(! temp.data.equals(data)) {
                	return false;
                }
            }
        }
        return false;
        
     }
    
 //*****************************************************************
    
    public int index(T data) {
    	Node<T> temp = head;
    	for(int i = 0 ; i < size() ; i++) {
    		if(temp.data.equals(data)) {
    			return i ;
    		}
    		temp = temp.next;
    	}
		return -1;
    	
    }
    
}
